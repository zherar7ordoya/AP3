C2: Designing OOP Solutions (Identifying the Class Structure)
C3: Designing OOP Solutions (Modeling the Object Interaction)
C4: Designing OOP Solutions (A Case Study)

===========================STATIC ASPECTS============================

SRS (Software Requirement Specification)
----------------------------------------

Defines the scope of the system. It's a textual description of the 
overall responsibilities and scope of the system.

The purpose of the SRS is to do the following:
*) Define the functional requirements of the system.
*) Identify the boundaries of the system.
*) Identify the users of the system.
*) Describe the interactions between the system and the external users.
*) Establish a common language between the client and the program 
   team for describing the system.
*) Provide the basis for modeling use cases.


USE CASE DIAGRAM
---------------- Verbos.

Use cases describe how external entities will use a system.

Define the system boundaries and identify the external entities that 
will use the system. It's a textual/graphical description of how the
system will behave from the user’s perspective. Users can be human 
or other systems.

Relationships: The difference between extension and inclusion is 
that, in extension, the base use case being extended is not used on 
its own.

A common mistake when developing use cases is to include actions 
initiated by the system itself. The emphasis of the use case is on 
the interaction between external entities and the system.
Another common mistake is to include a description of the technical 
requirements of the system. Remember that use cases do not focus on 
how the system will perform the functions, but rather on what 
functions need to be incorporated in the system from the user’s 
standpoint.

After you have developed the use cases of the system, you can begin 
to identify the internal system objects that will carry out the 
system’s functional requirements. You do this using a class diagram.


CLASS DIAGRAM
-------------

Model the structure of the classes that will be developed to 
implement the system. It's a visual blueprint of the objects that 
will be used to construct the system.


===========================DYNAMIC ASPECTS===========================

Interaction diagrams come in two flavors: sequence diagrams and 
collaboration diagrams.

SEQUENCE DIAGRAM (Interaction Diagram)                             OK
Models how the classes of objects interact with each other over time 
as the system runs. It's a model of the sequence of object 
interaction as the program executes. Emphasis is placed on the order 
of the interactions and how they proceed over time.

COLLABORATION DIAGRAM (Interaction Diagram)                        KO
It's a view of how objects are organized to work together as the 
program executes. Emphasis is placed on the communications that occur
between the objects.

ACTIVITY DIAGRAM
Illustrates the flow of activities that need to occur during an 
operation or process. It's  a visual representation of the flow of 
execution of a process or operation.

