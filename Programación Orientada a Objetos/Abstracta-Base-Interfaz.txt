¿CUÁL ES LA DIFERENCIA ENTRE UNA CLASE ABSTRACTA Y UNA INTERFAZ?
Existen diferencias técnicas entre las clases abstractas y las interfaces, ya que ser una clase abstracta puede contener la implementación de métodos, campos, constructores, etc., mientras que una interfaz solo contiene prototipos de métodos y propiedades. Una clase puede implementar múltiples interfaces, pero solo puede heredar una clase (abstracta o no).
Sin embargo, en mi opinión, la diferencia más importante entre las interfaces y las clases abstractas es la diferencia semántica.
Una interfaz define qué algo puede hacer (cómo se comporta), y una clase abstracta define qué es algo.

QUÉ ES UNA CLASE ABSTRACTA
La idea será algo como esto: la clase padre (abstracta) define una serie de operaciones bastante complejas y repetitivas y deja una o dos funciones sin definir para que la clase hija escriba aquí sus particularidades.

QUÉ ES UNA INTERFAZ
Una interface puede definirse como una declaración de métodos abstractos.

CUÁNDO USAR UNA CLASE ABSTRACTA Y UNA INTERFAZ
Debe usarse una clase abstracta cuando se está modelando una jerarquía de clases y una interface cuando se pretende homogeneizar nombres entre objetos que no están emparentados.

================================================================

CLASE BASE
Una clase base es o puede ser cualquier tipo de clase. Es decir, para que una clase sea una clase base, no necesita nada especial.

CLASE ABSTRACTA
Muchas veces se confunde con clase base. No es que sean muy diferentes, pero ojo, tampoco son la misma cosa. De hecho, una clase abstracta puede contener lógica y funcionalidad, algo que es coincidente con una clase base. Sin embargo, no es posible instanciar una clase abstracta, mientras que en el caso de una clase base, sí. Es decir, para utilizar una clase abstracta, no tenemos más remedio que heredar de ella.

INTERFAZ
En primer lugar, debemos asociar interfaz con comportamiento o mejor aún, con contrato. Una interfaz expone un contrato que debe cumplirse. Básicamente se trata de representar un contrato que debe cumplir cualquier clase que implemente la interfaz. Así de simple y así de sencillo. Desde el punto de vista de programación, una interfaz reúne un conjunto de miembros abstractos. La puntualización es que en una interfaz sólo se definen los miembros, y nunca se implementa nada. Los miembros de una interfaz (todos) son públicos por defecto.

